go.property('is_local_player', false)
go.property('is_tag', false)

local api = require('main.api')

local default_color = vmath.vector4(1, 1, 1, 1)
local normal_color = vmath.vector4(0.5, 1, 0.5, 1)
local self_tag_color = vmath.vector4(1, 0.6, 0.3, 1)
local tag_color = vmath.vector4(1, 0.25, 0.25, 1)

local function update_tint(self)
	if self.is_local_player then 
		model.set_constant('#model', 'tint', self.is_tag and self_tag_color or normal_color)
	else
		model.set_constant('#model', 'tint', self.is_tag and tag_color or default_color)
	end
end

function init(self)
	if self.is_local_player then 
		msg.post('.', 'acquire_input_focus')
	end
	update_tint(self)
	self.turn_speed = 0.1
	self.max_speed = 5
	
	self.turn = 0
	self.thrust = false
	self.angle = 0
	self.velocity = vmath.vector3(0)
end

function update(self)
	self.angle = self.angle - self.turn * self.turn_speed 
	go.set_rotation(vmath.quat_rotation_z(self.angle))
	
	local acceleration = self.thrust and 0.1 or 0	
	local direction = vmath.vector3(math.cos(self.angle), math.sin(self.angle), 0)
	self.velocity = self.velocity + direction * acceleration
	local speed = vmath.length(self.velocity)
	if speed > self.max_speed then
		self.velocity = vmath.normalize(self.velocity) * self.max_speed
	elseif not self.thrust and speed > 0 then
		self.velocity = vmath.normalize(self.velocity) * speed * 0.99
	end 
	
	local position = go.get_position()
	position = position + self.velocity
	local x_limit, y_limit = 700, 520
	if position.x > x_limit then
		position.x = -x_limit
	elseif position.x < -x_limit then
		position.x = x_limit
	end
	if position.y > y_limit + 120 then
		position.y = -y_limit
	elseif position.y < -y_limit then
		position.y = y_limit + 120
	end
	go.set_position(position + self.velocity)
end

function on_input(self, action_id, action)
	local is_valid_input = false
	if action_id == hash('key-a') or action_id == hash('key-left') then
		if action.pressed then
			self.turn = -1
			is_valid_input = true
		elseif action.released then
			self.turn = 0
			is_valid_input = true
		end
	elseif action_id == hash('key-d') or action_id == hash('key-right') then
		if action.pressed then
			self.turn = 1
			is_valid_input = true
		elseif action.released then
			self.turn = 0
			is_valid_input = true
		end
	elseif action_id == hash('key-w') or action_id == hash('key-up') or action_id == hash('key-space') then
		if action.pressed then
			self.thrust = true
			is_valid_input = true
		elseif action.released then
			self.thrust = false
			is_valid_input = true
		end
	elseif action_id == hash('touch') then
		local turn_left, turn_right, thrust = false, false, false
		local w = tonumber(sys.get_config('display.width'))
		for i = 1, #action.touch do
			if not action.touch[i].released then
				local x = action.touch[i].screen_x
				if x < w / 4 then
					turn_left = true
				elseif x < w / 2 then
					turn_right = true
				elseif x > w / 1.5 then
					thrust = true
				end
			end
		end
		local turn = 0
		if (turn_left or turn_right) and not (turn_left and turn_right) then
			turn = turn_left and -1 or 1
		end
		if self.turn ~= turn then
			self.turn = turn
			is_valid_input = true
		end
		if self.thrust ~= thrust then
			self.thrust = thrust
			is_valid_input = true
		end
	end
	if is_valid_input then
		local position = go.get_position()
		api.send{
			x = position.x, y = position.y,
			angle = self.angle,
			velocity_x = self.velocity.x, velocity_y = self.velocity.y,
			turn = self.turn,
			thrust = self.thrust
		}
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('server_update') then
    	self.is_tag = message.is_tag
    	if not self.is_local_player then
    		self.angle = message.angle
    		self.velocity.x, self.velocity.y = message.velocity_x, message.velocity_y
    		local position = go.get_position()
    		position.x, position.y = message.x, message.y
    		go.set_position(position)
    		self.turn = message.turn
    		self.thrust = message.thrust
    	end
    	update_tint(self)
    end
end